{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x7450dec59905b12f7b39d52b2d1bffe3a176496c8ecd87d3f0449d4183275f7e",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1036781",
        "logsBloom": "0x
        "blockHash": "0x1a59cfebea08e2e036c0ec147c7f852ca2a773bc1ad72330f7a63e6c32a48b2d",
        "transactionHash": "0x7450dec59905b12f7b39d52b2d1bffe3a176496c8ecd87d3f0449d4183275f7e",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1036781",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "cb8c8092c84b94c08a1e855eccf2477e",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.8;\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// Error codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Patrick Collins\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n    \\n    \\n    // refactoring: going back to edit code functionality\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // Mappings can't be in memory, sorry!\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // view / pure\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0x53ab72a7e2506a1c63ed8b9680458a34ba60dbf7e605986b3f08c21385aba9a8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xc3abb643d192a2b1a1f5e236bb2c78c7711304b791519548ea97d769d90c3035\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012e9380380620012e9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611163620001866000396000818161034201528181610591015281816105e101526107d701526111636000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9b565b6102f8565b6040516100cc9190610ae1565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610ae1565b60405180910390f35b34801561012357600080fd5b5061012c61058d565b6040516101399190610b0b565b60405180910390f35b34801561014e57600080fd5b506101576105b5565b6040516101649190610b85565b60405180910390f35b6101756101be565b005b61017f6105df565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bcc565b61086d565b6040516101b59190610b0b565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b590919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c56565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610ca5565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103eb576103ea610cfb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d2a565b9150506103c8565b50600067ffffffffffffffff81111561048c5761048b610d73565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d0929190610991565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610dd3565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e34565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610664576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069e575b5050505050905060005b81518110156107725760008282815181106107105761070f610cfb565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076a90610d2a565b9150506106f2565b50600067ffffffffffffffff81111561078e5761078d610d73565b5b6040519080825280602002602001820160405280156107bc5781602001602082028036833780820191505090505b50600190805190602001906107d2929190610991565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081990610dd3565b60006040518083038185875af1925050503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061086957600080fd5b5050565b60006001828154811061088357610882610cfb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c1836108f1565b90506000670de0b6b3a764000085836108da9190610e54565b6108e49190610edd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190610f9b565b5050509150506402540be400816109899190611016565b915050919050565b828054828255906000526020600020908101928215610a0a579160200282015b82811115610a095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b1565b5b509050610a179190610a1b565b5090565b5b80821115610a34576000816000905550600101610a1c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6882610a3d565b9050919050565b610a7881610a5d565b8114610a8357600080fd5b50565b600081359050610a9581610a6f565b92915050565b600060208284031215610ab157610ab0610a38565b5b6000610abf84828501610a86565b91505092915050565b6000819050919050565b610adb81610ac8565b82525050565b6000602082019050610af66000830184610ad2565b92915050565b610b0581610a5d565b82525050565b6000602082019050610b206000830184610afc565b92915050565b6000819050919050565b6000610b4b610b46610b4184610a3d565b610b26565b610a3d565b9050919050565b6000610b5d82610b30565b9050919050565b6000610b6f82610b52565b9050919050565b610b7f81610b64565b82525050565b6000602082019050610b9a6000830184610b76565b92915050565b610ba981610ac8565b8114610bb457600080fd5b50565b600081359050610bc681610ba0565b92915050565b600060208284031215610be257610be1610a38565b5b6000610bf084828501610bb7565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610c40601a83610bf9565b9150610c4b82610c0a565b602082019050919050565b60006020820190508181036000830152610c6f81610c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb082610ac8565b9150610cbb83610ac8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf057610cef610c76565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3582610ac8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6857610d67610c76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dbd600083610da2565b9150610dc882610dad565b600082019050919050565b6000610dde82610db0565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e1e600b83610bf9565b9150610e2982610de8565b602082019050919050565b60006020820190508181036000830152610e4d81610e11565b9050919050565b6000610e5f82610ac8565b9150610e6a83610ac8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea357610ea2610c76565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee882610ac8565b9150610ef383610ac8565b925082610f0357610f02610eae565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2d81610f0e565b8114610f3857600080fd5b50565b600081519050610f4a81610f24565b92915050565b6000819050919050565b610f6381610f50565b8114610f6e57600080fd5b50565b600081519050610f8081610f5a565b92915050565b600081519050610f9581610ba0565b92915050565b600080600080600060a08688031215610fb757610fb6610a38565b5b6000610fc588828901610f3b565b9550506020610fd688828901610f71565b9450506040610fe788828901610f86565b9350506060610ff888828901610f86565b925050608061100988828901610f3b565b9150509295509295909350565b600061102182610f50565b915061102c83610f50565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561106b5761106a610c76565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110a8576110a7610c76565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110e5576110e4610c76565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112257611121610c76565b5b82820290509291505056fea2646970667358221220917b732676ac581f730269a6e75d8dfc6095b708a6a048a05ddfebbf3fc8a0db64736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9b565b6102f8565b6040516100cc9190610ae1565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610ae1565b60405180910390f35b34801561012357600080fd5b5061012c61058d565b6040516101399190610b0b565b60405180910390f35b34801561014e57600080fd5b506101576105b5565b6040516101649190610b85565b60405180910390f35b6101756101be565b005b61017f6105df565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bcc565b61086d565b6040516101b59190610b0b565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b590919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c56565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610ca5565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103eb576103ea610cfb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d2a565b9150506103c8565b50600067ffffffffffffffff81111561048c5761048b610d73565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d0929190610991565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610dd3565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e34565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610664576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069e575b5050505050905060005b81518110156107725760008282815181106107105761070f610cfb565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076a90610d2a565b9150506106f2565b50600067ffffffffffffffff81111561078e5761078d610d73565b5b6040519080825280602002602001820160405280156107bc5781602001602082028036833780820191505090505b50600190805190602001906107d2929190610991565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081990610dd3565b60006040518083038185875af1925050503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061086957600080fd5b5050565b60006001828154811061088357610882610cfb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c1836108f1565b90506000670de0b6b3a764000085836108da9190610e54565b6108e49190610edd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190610f9b565b5050509150506402540be400816109899190611016565b915050919050565b828054828255906000526020600020908101928215610a0a579160200282015b82811115610a095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b1565b5b509050610a179190610a1b565b5090565b5b80821115610a34576000816000905550600101610a1c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6882610a3d565b9050919050565b610a7881610a5d565b8114610a8357600080fd5b50565b600081359050610a9581610a6f565b92915050565b600060208284031215610ab157610ab0610a38565b5b6000610abf84828501610a86565b91505092915050565b6000819050919050565b610adb81610ac8565b82525050565b6000602082019050610af66000830184610ad2565b92915050565b610b0581610a5d565b82525050565b6000602082019050610b206000830184610afc565b92915050565b6000819050919050565b6000610b4b610b46610b4184610a3d565b610b26565b610a3d565b9050919050565b6000610b5d82610b30565b9050919050565b6000610b6f82610b52565b9050919050565b610b7f81610b64565b82525050565b6000602082019050610b9a6000830184610b76565b92915050565b610ba981610ac8565b8114610bb457600080fd5b50565b600081359050610bc681610ba0565b92915050565b600060208284031215610be257610be1610a38565b5b6000610bf084828501610bb7565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610c40601a83610bf9565b9150610c4b82610c0a565b602082019050919050565b60006020820190508181036000830152610c6f81610c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb082610ac8565b9150610cbb83610ac8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf057610cef610c76565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3582610ac8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6857610d67610c76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dbd600083610da2565b9150610dc882610dad565b600082019050919050565b6000610dde82610db0565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e1e600b83610bf9565b9150610e2982610de8565b602082019050919050565b60006020820190508181036000830152610e4d81610e11565b9050919050565b6000610e5f82610ac8565b9150610e6a83610ac8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea357610ea2610c76565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee882610ac8565b9150610ef383610ac8565b925082610f0357610f02610eae565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2d81610f0e565b8114610f3857600080fd5b50565b600081519050610f4a81610f24565b92915050565b6000819050919050565b610f6381610f50565b8114610f6e57600080fd5b50565b600081519050610f8081610f5a565b92915050565b600081519050610f9581610ba0565b92915050565b600080600080600060a08688031215610fb757610fb6610a38565b5b6000610fc588828901610f3b565b9550506020610fd688828901610f71565b9450506040610fe788828901610f86565b9350506060610ff888828901610f86565b925050608061100988828901610f3b565b9150509295509295909350565b600061102182610f50565b915061102c83610f50565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561106b5761106a610c76565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110a8576110a7610c76565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110e5576110e4610c76565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112257611121610c76565b5b82820290509291505056fea2646970667358221220917b732676ac581f730269a6e75d8dfc6095b708a6a048a05ddfebbf3fc8a0db64736f6c63430008080033",
    "devdoc": {
        "author": "Patrick Collins",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
